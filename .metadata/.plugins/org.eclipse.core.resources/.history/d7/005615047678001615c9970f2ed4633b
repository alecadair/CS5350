/*
 * id3.cpp
 *
 *  Created on: Sep 10, 2016
 *      Author: adair
 */
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <vector>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <math.h>
#include <map>
#include <set>

using namespace std;
class TreeNode{
public:
	vector<TreeNode*> children;
	bool isLeafNode;
	//represents the vecor position of the attribute to be checked.
	int attribute;
	char value;
};

double CalculateInfoGain(vector<vector<char> > dataTable, vector<int> attributes, int indexOfAttribute){
	double entropy = 0;

	return 0.0;
}

TreeNode* InduceTree(vector<vector<char> > dataTable, vector<int> attributes){
	//create new root node
	TreeNode* rootNode = new TreeNode;
	/*
	 * Base Case check for all similar labels.
	 */
	bool sameLabels = true;
	char label = dataTable.at(0).at(dataTable.at(0).size() -1);
	for(int i = 0; i < dataTable.size();i++){
		vector<char> row = dataTable.at(i);
		char labelCheck = row.at(row.size() -1);
		//string labelCheck = dataTable.at(i).at(dataTable.at(i).size() -1 );
		//if(label.compare(labelCheck) != 0){
		if(labelCheck != label){
			sameLabels = false;
			break;
		}
	}
	for(int i = 0; i < 4; i++){
		cout << "Label\t" << dataTable.at(i).at(22) << endl;
	}
	if(sameLabels){
		//
		//TreeNode* leafNode = new TreeNode;
		rootNode->isLeafNode = true;
		rootNode->value = dataTable.at(0).at(22);
		//rootNode->children = NULL;
		rootNode->attribute = -1;
		return rootNode;
	}
	if(attributes.empty()){
		int eCounter = 0;
		int pCounter = 0;
		for(int i = 0; i < dataTable.size(); i ++){
			if(dataTable.at(i).at(22) == 'p'){
				pCounter ++;
			}
			else{
				eCounter ++;
			}
		}
		if(eCounter > pCounter){
			rootNode->isLeafNode = true;
			rootNode->value = 'e';
			//rootNode->children = NULL;
			rootNode->attribute = -1;
			return rootNode;
		}
		else{
			rootNode->isLeafNode = true;
			rootNode->value = 'p';
			//rootNode->children = NULL;
			rootNode->attribute = -1;
			return rootNode;
		}
	}
	/*
	 * Find attribute with most information gain
	 *
	 */
	else{
		double highestInfoGain = 0;
		for(int i = 0; i < attributes.size(); i++){
			//double parentEntropy = 1;
			int attribute = attributes.at(i);

			//map<char, vector<char> >
			map<char,int> attributeCount;
			set<char> attributes;
			double totalExamples = 0;
			double pCount = 0, eCount = 0;

			for(int j = 0; j < dataTable.size(); j++){
				char attr = dataTable.at(j).at(i);
				if(dataTable.at(j).at(22) == 'e'){
					eCount ++;
					//attributeCount.insert((attr,))
				}
				else{
					pCount ++;
				}
				//map[attr] ++;
				//map[attr]
				//attribu
				//map<int,char> example = attributeCount.find(attr);
				//attributeCount[attr].first ++;
				totalExamples ++;
			}
			double eProportion = eCount/totalExamples;
			double pProportion = pCount/totalExamples;
			double parentEntropy = -1*eProportion*log2(eProportion) + -1*(pProportion)*log2(pProportion);
			//float pCount = 0;
			//float eCount = 0;
			float subPCount = 0;
			float subECount= 0;
			for()
			for(const auto& example : attributeCount){

				//double proportion = example.second/totalExamples;
				//parentEntropy += -1*proportion*log2(proportion);
			}
			double infoGain = 0;
			double entropyOfSubsets = 0;
			for(const auto& example : attributeCount){
				double proportion = example.second/totalExamples;

			}

			//for(map<char,int>::iterator it = attributeCount.begin(); it != attributeCount.end(); it++){
				//float proportion =
			//}
			//double infoGain = CalculateInfoGain(dataTable,attributes,i);


		}

	}
	//TreeNode* rootNode = new TreeNode;
	return rootNode;
}



vector<vector<char> > ParseAndConstructTable(){
	vector<vector<char> > dataTable;
	//vector<string> data;
	string line;
	//stringstream iss;
	//string token;
	ifstream infile( "./datasets/SettingA/training.data");
	if(infile.is_open()){
		while(getline(infile,line)){
			stringstream iss;
			iss << line;
			vector<char> data;
			string token;
			while(getline(iss,token, ',')){
			//while(iss << line){
				//data.push_back(token->c_);
				data.push_back(token.c_str()[0]);
			}
			iss.clear();
			dataTable.push_back(data);
		}
	}
	return dataTable;
}


int main(int argc, char*argv[]){
	vector<vector<char> > attributes;
	attributes = ParseAndConstructTable();
	vector<int> attsToCheck(22);
	for(int i = 0; i < 22; i ++){
		attsToCheck[i] = i;
	}
	TreeNode* rootNode = InduceTree(attributes, attsToCheck);
	return 0;
}
